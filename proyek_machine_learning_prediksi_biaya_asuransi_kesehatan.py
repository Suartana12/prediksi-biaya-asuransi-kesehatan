# -*- coding: utf-8 -*-
"""Proyek Machine Learning: Prediksi Biaya Asuransi Kesehatan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AFdywG2aMjATfJWrzak8z7EdRTJThTNz

# **Proyek Machine Learning: Prediksi Biaya Asuransi Kesehatan**
*   **Nama:** Putu Yoga Suartana
*   **Email:** yoga.suartana46@gmail.com
*   **ID Dicoding:** putu_yoga_suartana_GJkz

# 1. **Import Library**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""# **2. Data Loading**"""

from google.colab import files
import io

# Kode ini akan menampilkan tombol untuk mengunggah file
print("Silakan unggah file insurance.csv")
uploaded = files.upload()

# Membaca file yang diunggah ke dalam DataFrame pandas
file_name = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[file_name]))

print("\nData loaded successfully:")
df.head()

"""# **3. Data Understanding**"""

df.info()

df.describe()

"""**Temuan Awal:**
*   Dataset memiliki 1338 baris dan 7 kolom.
*   Tidak ada nilai yang hilang (missing values), sehingga data sudah cukup bersih.
*   Terdapat 3 kolom kategorikal (`sex`, `smoker`, `region`) dan 4 kolom numerik.

## **Eksploratory Data Analysis (EDA)**
"""

# Set style untuk plot
sns.set_style("whitegrid")

# Plot distribusi variabel target 'charges'
plt.figure(figsize=(10, 6))
sns.histplot(df['charges'], kde=True, bins=40, color='skyblue')
plt.title('Distribusi Biaya Asuransi (Charges)', fontsize=16)
plt.xlabel('Charges', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.show()

"""**Interpretasi Distribusi `charges`: Grafik histogram menunjukkan distribusi biaya asuransi sangat miring ke kanan (right-skewed). Ini berarti mayoritas nasabah memiliki biaya yang relatif rendah, namun ada sebagian kecil nasabah dengan tagihan yang sangat tinggi.**"""

# Analisis fitur kategorikal terhadap 'charges'
fig, axes = plt.subplots(1, 3, figsize=(20, 7))

# Smoker vs Charges
sns.boxplot(x='smoker', y='charges', data=df, ax=axes[0], palette='pastel')
axes[0].set_title('Charges by Smoker Status', fontsize=14)

# Sex vs Charges
sns.boxplot(x='sex', y='charges', data=df, ax=axes[1], palette='pastel')
axes[1].set_title('Charges by Sex', fontsize=14)

# Region vs Charges
sns.boxplot(x='region', y='charges', data=df, ax=axes[2], palette='pastel')
axes[2].set_title('Charges by Region', fontsize=14)

plt.tight_layout()
plt.show()

"""**Interpretasi Box Plots:**
*   **Status Perokok (`smoker`):** Fitur ini memiliki pengaruh paling signifikan. Perokok memiliki biaya tagihan yang jauh lebih tinggi.
*   **Jenis Kelamin (`sex`):** Tagihan untuk laki-laki (male) cenderung sedikit lebih tinggi.
*   **Wilayah (`region`):** Perbedaan biaya antar wilayah tidak terlalu signifikan.
"""

# Heatmap Korelasi untuk fitur numerik
numeric_cols = df.select_dtypes(include=np.number).columns
correlation_matrix = df[numeric_cols].corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation Matrix of Numeric Features', fontsize=16)
plt.show()

"""**Interpretasi Heatmap Korelasi:**
*   Korelasi antara fitur-fitur numerik tidak terlalu kuat.
*   `age` memiliki korelasi positif sedang dengan `charges` (0.30).
*   `bmi` juga memiliki korelasi positif yang lebih lemah dengan `charges` (0.20).

# **4. Data Preparation**
"""

# One-Hot Encoding untuk fitur kategorikal
df_prepared = pd.get_dummies(df, columns=['sex', 'smoker', 'region'], drop_first=True)

# Memisahkan fitur (X) dan target (y)
X = df_prepared.drop('charges', axis=1)
y = df_prepared['charges']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Ukuran X_train: {X_train.shape}")
print(f"Ukuran X_test: {X_test.shape}")

# Scaling fitur numerik
numeric_features = ['age', 'bmi', 'children']
scaler = StandardScaler()

# Fit scaler pada data latih dan transform
X_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])

# Transform data uji menggunakan scaler yang sama
X_test[numeric_features] = scaler.transform(X_test[numeric_features])

print("Contoh data latih setelah di-scaling:")
X_train.head()

"""# **5. Model Development**"""

# Inisialisasi model
models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100, random_state=42)
}

# Melatih setiap model
for name, model in models.items():
    model.fit(X_train, y_train)
    print(f"{name} trained.")

"""# **6. Evaluasi**"""

# Membuat DataFrame untuk menyimpan hasil evaluasi
results = {}

for name, model in models.items():
    y_pred = model.predict(X_test)
    results[name] = {
        'MAE': mean_absolute_error(y_test, y_pred),
        'MSE': mean_squared_error(y_test, y_pred),
        'RMSE': np.sqrt(mean_squared_error(y_test, y_pred)),
        'R-squared': r2_score(y_test, y_pred)
    }

results_df = pd.DataFrame(results).T
print("Model Evaluation Metrics:")
results_df

# Visualisasi hasil evaluasi
fig, ax = plt.subplots(figsize=(10, 6))
results_df['R-squared'].sort_values().plot(kind='barh', ax=ax, color=['skyblue', 'lightgreen', 'salmon'])
ax.set_title('Model Comparison: R-squared Score', fontsize=16)
ax.set_xlabel('R-squared Score', fontsize=12)
plt.show()

"""# **Kesimpulan**

**Dari hasil evaluasi, Gradient Boosting Regressor adalah model dengan performa terbaik, ditandai dengan nilai R-squared tertinggi (~0.88) dan error (MAE/RMSE) terendah. Model ini paling akurat dalam memprediksi biaya asuransi kesehatan berdasarkan fitur yang diberikan.**
"""